// Code generated by MockGen. DO NOT EDIT.
// Source: repository_interface.go

// Package mock is a generated GoMock package.
package mock

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/hollgett/metricsYandex.git/internal/server/models"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRepository) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRepositoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRepository)(nil).Close))
}

// Get mocks base method.
func (m *MockRepository) Get(metric *models.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), metric)
}

// GetAll mocks base method.
func (m *MockRepository) GetAll() ([]models.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]models.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRepository)(nil).GetAll))
}

// Save mocks base method.
func (m *MockRepository) Save(data models.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRepositoryMockRecorder) Save(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRepository)(nil).Save), data)
}

// UpdateSyncMiddleware mocks base method.
func (m *MockRepository) UpdateSyncMiddleware(next http.Handler) http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSyncMiddleware", next)
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// UpdateSyncMiddleware indicates an expected call of UpdateSyncMiddleware.
func (mr *MockRepositoryMockRecorder) UpdateSyncMiddleware(next interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSyncMiddleware", reflect.TypeOf((*MockRepository)(nil).UpdateSyncMiddleware), next)
}

// UpdateTicker mocks base method.
func (m *MockRepository) UpdateTicker(interval int, done chan bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateTicker", interval, done)
}

// UpdateTicker indicates an expected call of UpdateTicker.
func (mr *MockRepositoryMockRecorder) UpdateTicker(interval, done interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTicker", reflect.TypeOf((*MockRepository)(nil).UpdateTicker), interval, done)
}
