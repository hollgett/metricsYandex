// Code generated by MockGen. DO NOT EDIT.
// Source: metric_handler.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMetricHandler is a mock of MetricHandler interface.
type MockMetricHandler struct {
	ctrl     *gomock.Controller
	recorder *MockMetricHandlerMockRecorder
}

// MockMetricHandlerMockRecorder is the mock recorder for MockMetricHandler.
type MockMetricHandlerMockRecorder struct {
	mock *MockMetricHandler
}

// NewMockMetricHandler creates a new mock instance.
func NewMockMetricHandler(ctrl *gomock.Controller) *MockMetricHandler {
	mock := &MockMetricHandler{ctrl: ctrl}
	mock.recorder = &MockMetricHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricHandler) EXPECT() *MockMetricHandlerMockRecorder {
	return m.recorder
}

// CollectingMetric mocks base method.
func (m *MockMetricHandler) CollectingMetric(originalURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectingMetric", originalURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// CollectingMetric indicates an expected call of CollectingMetric.
func (mr *MockMetricHandlerMockRecorder) CollectingMetric(originalURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectingMetric", reflect.TypeOf((*MockMetricHandler)(nil).CollectingMetric), originalURL)
}
